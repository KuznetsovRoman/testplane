import _ from "lodash";
import fs from "fs-extra";
import path from "path";
import { browserInstallerDebug, getUbuntuPackagesDir } from "../utils";
import { installUbuntuPackages } from "./apt";
import { getUbuntuMilestone } from "./utils";
import logger from "../../utils/logger";
import { LINUX_RUNTIME_LIBRARIES_PATH_ENV_NAME } from "../constants";

export { isUbuntu, getUbuntuMilestone, ensureUnixBinaryExists } from "./utils";

const getDependenciesArrayFilePath = (ubuntuMilestone: string): string =>
    path.join(__dirname, "autogenerated", `ubuntu-${ubuntuMilestone}-dependencies.json`);

const readUbuntuPackageDependencies = async (ubuntuMilestone: string): Promise<string[]> => {
    try {
        return await fs.readJSON(getDependenciesArrayFilePath(ubuntuMilestone));
    } catch (_) {
        logger.warn(
            [
                `Unable to read ubuntu dependencies for Ubuntu@${ubuntuMilestone}, as this version currently not supported`,
                `Assuming all necessary packages are installed already`,
            ].join("\n"),
        );

        return [];
    }
};

export const writeUbuntuPackageDependencies = async (ubuntuMilestone: string, deps: string[]): Promise<void> => {
    const currentPackages = await readUbuntuPackageDependencies(ubuntuMilestone).catch(() => [] as string[]);

    const packagesToWrite = _.uniq(currentPackages.concat(deps)).sort();

    await fs.outputJSON(getDependenciesArrayFilePath(ubuntuMilestone), packagesToWrite, { spaces: 4 });
};

let installUbuntuPackageDependenciesPromise: Promise<void>;

export const installUbuntuPackageDependencies = async (): Promise<void> => {
    if (installUbuntuPackageDependenciesPromise) {
        return installUbuntuPackageDependenciesPromise;
    }

    installUbuntuPackageDependenciesPromise = new Promise<void>((resolve, reject) => {
        const ubuntuPackagesDir = getUbuntuPackagesDir();

        if (fs.existsSync(ubuntuPackagesDir)) {
            browserInstallerDebug("Skip installing ubuntu packages, as they are installed already");

            resolve();
        } else {
            logger.log("Downloading extra deb packages to local browsers execution...");

            getUbuntuMilestone()
                .then(ubuntuMilestone => readUbuntuPackageDependencies(ubuntuMilestone))
                .then(dependencies => installUbuntuPackages(dependencies, ubuntuPackagesDir))
                .then(resolve)
                .catch(reject);
        }
    });

    return installUbuntuPackageDependenciesPromise;
};

const listDirsAbsolutePath = async (dirBasePath: string, ...prefix: string[]): Promise<string[]> => {
    const fullDirPath = path.join(dirBasePath, ...prefix);

    if (!fs.existsSync(fullDirPath)) {
        return [];
    }

    const dirContents = await fs.readdir(fullDirPath);
    const dirContentsAbsPaths = dirContents.map(obj => path.join(fullDirPath, obj));

    const directories = [] as string[];

    await Promise.all(
        dirContentsAbsPaths.map(obj =>
            fs.stat(obj).then(stat => {
                if (stat.isDirectory()) {
                    directories.push(obj);
                }
            }),
        ),
    );

    return directories;
};

let getUbuntuLinkerEnvPromise: Promise<Record<string, string>>;

export const getUbuntuLinkerEnv = async (): Promise<Record<string, string>> => {
    if (getUbuntuLinkerEnvPromise) {
        return getUbuntuLinkerEnvPromise;
    }

    getUbuntuLinkerEnvPromise = new Promise<Record<string, string>>((resolve, reject) => {
        const ubuntuPackagesDir = getUbuntuPackagesDir();

        if (!fs.existsSync(ubuntuPackagesDir)) {
            return resolve({});
        }

        const currentRuntimeLibrariesEnvValue = process.env[LINUX_RUNTIME_LIBRARIES_PATH_ENV_NAME];

        Promise.all([
            listDirsAbsolutePath(ubuntuPackagesDir, "lib"),
            listDirsAbsolutePath(ubuntuPackagesDir, "usr", "lib"),
        ])
            .then(([libDirs, usrLibDirs]) => {
                const libraryPaths = [...libDirs, ...usrLibDirs, currentRuntimeLibrariesEnvValue].filter(Boolean);

                return { [LINUX_RUNTIME_LIBRARIES_PATH_ENV_NAME]: libraryPaths.join(":") };
            })
            .then(resolve)
            .catch(reject);
    });

    return getUbuntuLinkerEnvPromise;
};
